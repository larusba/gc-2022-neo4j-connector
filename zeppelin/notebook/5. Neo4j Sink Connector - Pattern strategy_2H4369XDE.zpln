{
  "paragraphs": [
    {
      "text": "%md\nHere is a piece of JSON configuration we’re going to use to create our Neo4j Sink connector with the Node Pattern strategy.\n\n```\n{\n  \"name\": \"Neo4jSinkConnectorNodePattern\",\n  \"config\": {\n    \"topics\": \"personNodePattern\",\n    \"connector.class\": \"streams.kafka.connect.sink.Neo4jSinkConnector\",\n    \"key.converter\": \"org.apache.kafka.connect.json.JsonConverter\",\n    \"key.converter.schemas.enable\": false,\n    \"value.converter\": \"org.apache.kafka.connect.json.JsonConverter\",\n    \"value.converter.schemas.enable\": false,\n    \"kafka.bootstrap.servers\": \"broker:9093\",\n    \"neo4j.server.uri\": \"bolt://neo4j:7687\",\n    \"neo4j.authentication.basic.username\": \"neo4j\",\n    \"neo4j.authentication.basic.password\": \"password\",\n    \"neo4j.encryption.enabled\": false,\n    \"neo4j.topic.pattern.node.personNodePattern\": \"Person{!name,*}\"\n  }\n}\n```\n\nTo create the connector instance we just need to submit the above JSON to the Kafka Connect REST endpoint, as follow:\n\n```\ncurl -X POST http://localhost:8083/connectors -H \u0027Content-Type:application/json\u0027 -H \u0027Accept:application/json\u0027 -d @kafka-connect-sink-pattern-node.json\n```\n\nNow our topics list should include also our new `personNodePattern` topic. We can verify it by running:\n\n```\ndocker exec -it broker kafka-topics --bootstrap-server broker:9092 --list\n```",
      "user": "anonymous",
      "dateUpdated": "2022-06-03 09:21:08.099",
      "progress": 0,
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eHere is a piece of JSON configuration we’re going to use to create our Neo4j Sink connector with the Node Pattern strategy.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\n  \u0026quot;name\u0026quot;: \u0026quot;Neo4jSinkConnectorNodePattern\u0026quot;,\n  \u0026quot;config\u0026quot;: {\n    \u0026quot;topics\u0026quot;: \u0026quot;personNodePattern\u0026quot;,\n    \u0026quot;connector.class\u0026quot;: \u0026quot;streams.kafka.connect.sink.Neo4jSinkConnector\u0026quot;,\n    \u0026quot;key.converter\u0026quot;: \u0026quot;org.apache.kafka.connect.json.JsonConverter\u0026quot;,\n    \u0026quot;key.converter.schemas.enable\u0026quot;: false,\n    \u0026quot;value.converter\u0026quot;: \u0026quot;org.apache.kafka.connect.json.JsonConverter\u0026quot;,\n    \u0026quot;value.converter.schemas.enable\u0026quot;: false,\n    \u0026quot;kafka.bootstrap.servers\u0026quot;: \u0026quot;broker:9093\u0026quot;,\n    \u0026quot;neo4j.server.uri\u0026quot;: \u0026quot;bolt://neo4j:7687\u0026quot;,\n    \u0026quot;neo4j.authentication.basic.username\u0026quot;: \u0026quot;neo4j\u0026quot;,\n    \u0026quot;neo4j.authentication.basic.password\u0026quot;: \u0026quot;password\u0026quot;,\n    \u0026quot;neo4j.encryption.enabled\u0026quot;: false,\n    \u0026quot;neo4j.topic.pattern.node.personNodePattern\u0026quot;: \u0026quot;Person{!name,*}\u0026quot;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo create the connector instance we just need to submit the above JSON to the Kafka Connect REST endpoint, as follow:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecurl -X POST http://localhost:8083/connectors -H \u0027Content-Type:application/json\u0027 -H \u0027Accept:application/json\u0027 -d @kafka-connect-sink-pattern-node.json\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow our topics list should include also our new \u003ccode\u003epersonNodePattern\u003c/code\u003e topic. We can verify it by running:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edocker exec -it broker kafka-topics --bootstrap-server broker:9092 --list\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1653472349698_1829806306",
      "id": "paragraph_1653472349698_1829806306",
      "dateCreated": "2022-05-25 09:52:29.698",
      "dateStarted": "2022-06-01 19:26:01.513",
      "dateFinished": "2022-06-01 19:26:01.704",
      "status": "FINISHED"
    },
    {
      "text": "%md\nLet\u0027s send the following event \n\n```\n{\"name\": \"Elijah Wood\", \"born\":1981}\n```\n\ninto the `personNodePattern` topic via `kcat` producer:\n\n```\nkcat -P -b localhost:9092 -t personNodePattern\n```\n\nWith the provided node pattern, the node that is going to be created will be a `Person` node with `name` as ID field and `born` as property.\nLet\u0027s check it out by running the query in the next paragraph",
      "user": "anonymous",
      "dateUpdated": "2022-06-01 19:24:59.024",
      "progress": 0,
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eLet\u0026rsquo;s send the following event\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u0026quot;name\u0026quot;: \u0026quot;Elijah Wood\u0026quot;, \u0026quot;born\u0026quot;:1981}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003einto the \u003ccode\u003epersonNodePattern\u003c/code\u003e topic via \u003ccode\u003ekcat\u003c/code\u003e producer:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekcat -P -b localhost:9092 -t personNodePattern\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith the provided node pattern, the node that is going to be created will be a \u003ccode\u003ePerson\u003c/code\u003e node with \u003ccode\u003ename\u003c/code\u003e as ID field and \u003ccode\u003eborn\u003c/code\u003e as property.\u003cbr /\u003e\nLet\u0026rsquo;s check it out by running the query in the next paragraph\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1653472512197_733971674",
      "id": "paragraph_1653472512197_733971674",
      "dateCreated": "2022-05-25 09:55:12.197",
      "dateStarted": "2022-06-01 19:24:59.023",
      "dateFinished": "2022-06-01 19:24:59.149",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\nMATCH (p:Person {name:\"Elijah Wood\"}) RETURN p",
      "user": "anonymous",
      "dateUpdated": "2022-06-03 09:18:44.960",
      "progress": 0,
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "network",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "id": "string",
                      "label": "string",
                      "name": "string",
                      "born": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "NETWORK",
            "data": "{\"nodes\":[{\"id\":172,\"data\":{\"name\":\"Elijah Wood\",\"born\":\"1981\"},\"label\":\"Person\"}],\"edges\":[],\"labels\":{\"Movie\":\"#5BB17B\",\"Person\":\"#4B9385\"},\"types\":[\"ACTED_IN\",\"REVIEWED\",\"PRODUCED\",\"WROTE\",\"FOLLOWS\",\"DIRECTED\"],\"directed\":true}"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1653472661241_1237879766",
      "id": "paragraph_1653472661241_1237879766",
      "dateCreated": "2022-05-25 09:57:41.241",
      "dateStarted": "2022-06-03 09:18:44.979",
      "dateFinished": "2022-06-03 09:18:45.318",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n// the property born should be eliminated\nMATCH (p:Person {name:\"Elijah Wood\"}) RETURN p",
      "user": "anonymous",
      "dateUpdated": "2022-06-03 09:39:27.466",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9.0,
        "results": {
          "0": {
            "graph": {
              "mode": "network",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "id": "string",
                      "label": "string",
                      "name": "string",
                      "city": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            },
            "helium": {}
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "NETWORK",
            "data": "{\"nodes\":[{\"id\":172,\"data\":{\"roles\":\"[\\\"Frodo Baggins\\\"]\",\"born\":\"1981\",\"name\":\"Elijah Wood\",\"tile\":\"The Lord of the Rings - The Fellowship of the Ring\",\"tagline\":\"One ring to rule them all\",\"released\":\"2001\"},\"label\":\"Person\"}],\"edges\":[],\"labels\":{\"Movie\":\"#5BB17B\",\"Person\":\"#4B9385\"},\"types\":[\"ACTED_IN\",\"REVIEWED\",\"PRODUCED\",\"WROTE\",\"FOLLOWS\",\"DIRECTED\"],\"directed\":true}"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1654244644191_1264272928",
      "id": "paragraph_1654244644191_1264272928",
      "dateCreated": "2022-06-03 08:24:04.191",
      "dateStarted": "2022-06-03 09:39:27.485",
      "dateFinished": "2022-06-03 09:39:27.695",
      "status": "FINISHED"
    },
    {
      "text": "%md\nNow let\u0027s use the following JSON configuration to create our Neo4j Sink connector with the Relationship Pattern strategy.\n\n```\n{\n  \"name\": \"Neo4jSinkConnectorRelPattern\",\n  \"config\": {\n    \"topics\": \"actedInRelPattern\",\n    \"connector.class\": \"streams.kafka.connect.sink.Neo4jSinkConnector\",\n    \"key.converter\": \"org.apache.kafka.connect.json.JsonConverter\",\n    \"key.converter.schemas.enable\": false,\n    \"value.converter\": \"org.apache.kafka.connect.json.JsonConverter\",\n    \"value.converter.schemas.enable\": false,\n    \"kafka.bootstrap.servers\": \"broker:9093\",\n    \"neo4j.server.uri\": \"bolt://neo4j:7687\",\n    \"neo4j.authentication.basic.username\": \"neo4j\",\n    \"neo4j.authentication.basic.password\": \"password\",\n    \"neo4j.encryption.enabled\": false,\n    \"neo4j.topic.pattern.relationship.actedInRelPattern\": \"(:Person{!name,born})-[:ACTED_IN{roles}]-\u003e(:Movie{!title,released,tagline})\"\n  }\n}\n```\n\nTo create the connector instance we just need to submit the above JSON to the Kafka Connect REST endpoint, as follow:\n\n```\ncurl -X POST http://localhost:8083/connectors -H \u0027Content-Type:application/json\u0027 -H \u0027Accept:application/json\u0027 -d @kafka-connect-sink-pattern-rel.json\n```\n\nNow our topics list should include also our new `actedInRelPattern` topic. We can verify it by running:\n\n```\ndocker exec -it broker kafka-topics --bootstrap-server broker:9092 --list\n```",
      "user": "anonymous",
      "dateUpdated": "2022-06-03 09:30:01.885",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eNow let\u0026rsquo;s use the following JSON configuration to create our Neo4j Sink connector with the Relationship Pattern strategy.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\n  \u0026quot;name\u0026quot;: \u0026quot;Neo4jSinkConnectorRelPattern\u0026quot;,\n  \u0026quot;config\u0026quot;: {\n    \u0026quot;topics\u0026quot;: \u0026quot;actedInRelPattern\u0026quot;,\n    \u0026quot;connector.class\u0026quot;: \u0026quot;streams.kafka.connect.sink.Neo4jSinkConnector\u0026quot;,\n    \u0026quot;key.converter\u0026quot;: \u0026quot;org.apache.kafka.connect.json.JsonConverter\u0026quot;,\n    \u0026quot;key.converter.schemas.enable\u0026quot;: false,\n    \u0026quot;value.converter\u0026quot;: \u0026quot;org.apache.kafka.connect.json.JsonConverter\u0026quot;,\n    \u0026quot;value.converter.schemas.enable\u0026quot;: false,\n    \u0026quot;kafka.bootstrap.servers\u0026quot;: \u0026quot;broker:9093\u0026quot;,\n    \u0026quot;neo4j.server.uri\u0026quot;: \u0026quot;bolt://neo4j:7687\u0026quot;,\n    \u0026quot;neo4j.authentication.basic.username\u0026quot;: \u0026quot;neo4j\u0026quot;,\n    \u0026quot;neo4j.authentication.basic.password\u0026quot;: \u0026quot;password\u0026quot;,\n    \u0026quot;neo4j.encryption.enabled\u0026quot;: false,\n    \u0026quot;neo4j.topic.pattern.relationship.actedInRelPattern\u0026quot;: \u0026quot;(:Person{!name,born})-[:ACTED_IN{roles}]-\u0026gt;(:Movie{!title,released,tagline})\u0026quot;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo create the connector instance we just need to submit the above JSON to the Kafka Connect REST endpoint, as follow:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecurl -X POST http://localhost:8083/connectors -H \u0027Content-Type:application/json\u0027 -H \u0027Accept:application/json\u0027 -d @kafka-connect-sink-pattern-rel.json\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow our topics list should include also our new \u003ccode\u003eactedInRelPattern\u003c/code\u003e topic. We can verify it by running:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edocker exec -it broker kafka-topics --bootstrap-server broker:9092 --list\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1654247966410_750123223",
      "id": "paragraph_1654247966410_750123223",
      "dateCreated": "2022-06-03 09:19:26.411",
      "dateStarted": "2022-06-03 09:30:01.884",
      "dateFinished": "2022-06-03 09:30:02.234",
      "status": "FINISHED"
    },
    {
      "text": "%md\nNow let\u0027s send the following event \n\n```\n{\"name\": \"Elijah Wood\", \"born\": 1981, \"title\": \"The Lord of the Rings - The Fellowship of the Ring\", \"released\": \"2001\", \"roles\": [\"Frodo Baggins\"], \"tagline\": \"One ring to rule them all\"}\n```\n\ninto the `actedInRelPattern` topic via `kcat` producer:\n\n```\nkcat -P -b localhost:9092 -t actedInRelPattern\n```\n\nSo in this case the node will be updated by calling a `MERGE` query over the node and overwriting the properties",
      "user": "anonymous",
      "dateUpdated": "2022-06-03 09:47:25.851",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eNow let\u0026rsquo;s send the following event\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u0026quot;name\u0026quot;: \u0026quot;Elijah Wood\u0026quot;, \u0026quot;born\u0026quot;: 1981, \u0026quot;title\u0026quot;: \u0026quot;The Lord of the Rings - The Fellowship of the Ring\u0026quot;, \u0026quot;released\u0026quot;: \u0026quot;2001\u0026quot;, \u0026quot;roles\u0026quot;: [\u0026quot;Frodo Baggins\u0026quot;], \u0026quot;tagline\u0026quot;: \u0026quot;One ring to rule them all\u0026quot;}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003einto the \u003ccode\u003eactedInRelPattern\u003c/code\u003e topic via \u003ccode\u003ekcat\u003c/code\u003e producer:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekcat -P -b localhost:9092 -t actedInRelPattern\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo in this case the node will be updated by calling a \u003ccode\u003eMERGE\u003c/code\u003e query over the node and overwriting the properties\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1654244597880_364050229",
      "id": "paragraph_1654244597880_364050229",
      "dateCreated": "2022-06-03 08:23:17.880",
      "dateStarted": "2022-06-03 09:47:25.851",
      "dateFinished": "2022-06-03 09:47:26.019",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\nmatch (p:Person {name: \"Elijah Wood\"})-[r:ACTED_IN]-\u003e(m:Movie) return p,r,m",
      "user": "anonymous",
      "dateUpdated": "2022-06-03 09:47:40.711",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9.0,
        "results": {
          "0": {
            "graph": {
              "mode": "network",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "id": "string",
                      "label": "string",
                      "tagline": "string",
                      "title": "string",
                      "released": "string",
                      "name": "string",
                      "born": "string",
                      "roles": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            },
            "helium": {}
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "NETWORK",
            "data": "{\"nodes\":[{\"id\":171,\"data\":{\"tagline\":\"One ring to rule them all\",\"title\":\"The Lord of the Rings - The Fellowship of the Ring\",\"released\":\"2001\"},\"label\":\"Movie\"},{\"id\":172,\"data\":{\"name\":\"Elijah Wood\",\"born\":\"1981\"},\"label\":\"Person\"}],\"edges\":[{\"source\":172,\"target\":171,\"id\":253,\"data\":{\"roles\":\"[\\\"Frodo Baggins\\\"]\"},\"label\":\"ACTED_IN\"}],\"labels\":{\"Movie\":\"#5BB17B\",\"Person\":\"#4B9385\"},\"types\":[\"ACTED_IN\",\"REVIEWED\",\"PRODUCED\",\"WROTE\",\"FOLLOWS\",\"DIRECTED\"],\"directed\":true}"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1654248291673_889048306",
      "id": "paragraph_1654248291673_889048306",
      "dateCreated": "2022-06-03 09:24:51.676",
      "dateStarted": "2022-06-03 09:47:38.140",
      "dateFinished": "2022-06-03 09:47:38.358",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n",
      "user": "anonymous",
      "dateUpdated": "2022-06-03 09:36:18.856",
      "progress": 0,
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1654248978856_273607610",
      "id": "paragraph_1654248978856_273607610",
      "dateCreated": "2022-06-03 09:36:18.856",
      "status": "READY"
    }
  ],
  "name": "5. Neo4j Sink Connector - Pattern strategy",
  "id": "2H4369XDE",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0-preview2",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}